#!/usr/bin/env ruby


module FeetExpander

  class << self

    def expand(s, &block)

      s
        .gsub(
          %r{
            (\d+\/)?
            (\d[.,]\d+|[.,]\d+|\d+)[- ]*
            (foot|feet|ft\.?)
          }xi) {
            r = expand_feet($1, $2, $3)
            block ? block.call(r) : r
          }
    end

    protected

    def expand_feet(r0, r1, unit)

      [ r0 ? do_expand_feet(r0) : nil, do_expand_feet(r1) ]
        .compact.join(' / ')
    end

    def rtos(range)

      case r = ('%.1f' % range)
      when /\.[1-9]/ then r.to_f.to_s
      when /\.0*/ then r.to_i.to_s
      else r
      end
    end

    def do_expand_feet(range)

      ft = range.to_i; return '0ft' if ft == 0
      m = ft * 0.3
      sq = ft * 0.2

      [ "#{rtos(ft)}ft", "#{rtos(m)}m", "#{rtos(sq)}sq", tost(ft) ]
        .compact
        .join(' ')
    end

    def tost(ft)

      minone = false
      if ft % 10 == 5
        minone = true
        ft += 5
      end

      r = ('x' * (ft.to_i / 5))
        .gsub(/xxxxxx/, 't')
        .gsub(/tttt/, 'FFF')
        .gsub(/ttxxxx/, 'FF')
        .gsub(/txx/, 'F')
        .gsub(/Fxxxx/, 'tt')
        .gsub(/Fxx/, 'V')
        .gsub(/FFFFF/, 'VVVV')

      r = r.chars
        .sort_by { |c| c == 'V' ? -50 : c == 'F' ? -40 : c == 't' ? -30 : -5 }
        .join

      r = r
        .gsub(/V{4,}/) { |x| "#{x.length}V" }
        .gsub(/F{4,}/) { |x| "#{x.length}F" }
        .gsub(/t{4,}/) { |x| "#{x.length}t" }

      return 't-2' if ! minone && r == 'xxxx'

      return nil if r.match(/^x{1,4}$/)

      minone ? r + '-1' : r
    end
  end
end


s = ARGV[0]
s = s + 'ft' unless s.index('f')

puts FeetExpander.expand(s)

