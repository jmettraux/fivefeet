#!/usr/bin/env ruby


module FiveFeet

  class << self

    def expand(s, opts={})

      s
        .gsub(
          %r{
            (\d+\/)?
            (\d[.,]\d+|[.,]\d+|\d+)[- ]*
            (foot|feet|ft\.?)
          }xi) {
            expand_feet($1, $2, opts)
          }
    end

    protected

    def expand_feet(r0, r1, opts)

      [ r0 ? do_expand_feet(r0, opts) : nil, do_expand_feet(r1, opts) ]
        .compact.join(' / ')
    end

    def rtos(range)

      case r = ('%.1f' % range)
      when /\.[1-9]/ then r.to_f.to_s
      when /\.0*/ then r.to_i.to_s
      else r
      end
    end

    def do_expand_feet(range, opts)

      ft = range.to_i; return '0ft' if ft == 0
      m = ft * 0.3
      sq = ft * 0.2

      [ "#{rtos(ft)}ft", "#{rtos(m)}m", "#{rtos(sq)}sq", tost(ft, opts) ]
        .compact
        .join(' ')
    end

    def tost(ft, opts)

      return nil if opts[:max] && ft > opts[:max]

      minone = false
      if ft % 10 == 5
        minone = true
        ft += 5
      end

      r = ('x' * (ft.to_i / 5))
        .gsub(/xxxxxx/, 't')
        .gsub(/tttt/, 'FFF')
        .gsub(/ttxxxx/, 'FF')
        .gsub(/txx/, 'F')
        .gsub(/Fxxxx/, 'tt')
        .gsub(/Fxx/, 'V')
        .gsub(/FFFFF/, 'VVVV')

      r = r.chars
        .sort_by { |c| c == 'V' ? -50 : c == 'F' ? -40 : c == 't' ? -30 : -5 }
        .join

      r = r
        .gsub(/V{4,}/) { |x| "#{x.length}V" }
        .gsub(/F{4,}/) { |x| "#{x.length}F" }
        .gsub(/t{4,}/) { |x| "#{x.length}t" }

      return 't-2' if ! minone && r == 'xxxx'

      return nil if r.match(/^x{1,4}$/)

      minone ? r + '-1' : r
    end
  end
end


argh = {}
arga = []
  #
loop do
  a = ARGV.shift; break unless a
  k = a; k = k[1..-1] while k[0, 1] == '-'
  case a
  when '-m', '--max' then argh[k] = ARGV.shift.to_i
  when /^-[a-zA-Z]$/ then argh[k] = true
  when /^--[-a-zA-Z]+$/ then argh[k] = true
  else arga << a
  end
end

if (h = argh['h'] || argh['help']) || arga.first == nil

  puts
  puts "fivefeet"
  puts
  puts "  #{$0} 30ft"
  puts "    #==> 30ft 9m 6sq t"
  puts
  puts "  #{$0} 300ft"
  puts "    #==> 300ft 90m 60sq 4VFtt"
  puts "  #{$0} 300ft --max 299"
  puts "    #==> 300ft 90m 60sq"
  puts

  exit h ? 0 : 1
end

opts = {}
opts[:max] = argh['max'] || argh['m']

puts FiveFeet.expand(arga.first, opts)

