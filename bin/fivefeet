#!/usr/bin/env ruby


module FeetExpander

  class << self

    def expand(s, &block)

      s
        .gsub(
          %r{
            (\d+\/)?
            (\d[.,]\d+|[.,]\d+|\d+)[- ]*
            (foot|feet|ft\.?)
          }xi) {
            r = expand_feet($1, $2, $3)
            block ? block.call(r) : r
          }
    end

    protected

    def expand_feet(r0, r1, unit)

      [ r0 ? do_expand_feet(r0) : nil, do_expand_feet(r1) ]
        .compact.join(' / ')
    end

    def rtos(range)

      case r = ('%.1f' % range)
      when /\.[1-9]/ then r.to_f.to_s
      when /\.0*/ then r.to_i.to_s
      else r
      end
    end

    def do_expand_feet(range)

      ft = range.to_i; return '0ft' if ft == 0
      m = ft * 0.3
      sq = ft * 0.2

      st =
        tost(ft)
      #st =
      #  case st
      #  when '+5' then 't-1'
      #  when '+4' then 't-2'
      #  when /^\+/ then nil
      #  else st
      #  end

      [ "#{rtos(ft)}ft", "#{rtos(m)}m", "#{rtos(sq)}sq", st ]
        .compact
        .join(' ')
    end

    def tost(ft)

      rs = [
        to_rulers(ft, { V: 50, F: 40, t: 30, x: 5 }),
        to_rulers(ft, { F: 40, t: 30, x: 5 }),
        to_rulers(ft, { t: 30, x: 5 }) ]

      return nil if rs.all? { |e| e.match?(/^\d*x$/) }

      r = rs.find { |e| e.length == 1 }; return r if r

      rs.join('_')
    end

    def to_rulers(ft, h)

      h
        .collect { |k, v|
          c = ft / v; ft = ft % v
          [ c, k ] }
        .collect { |c, k|
          case c
          when 0 then ''
          when 1 then k
          else "#{c}#{k}"
          end }
        .collect { |e|
          case e
          when 'x' then '+1'
          when '5x' then '-1'
          else e
          end }
        .join
    end
  end
end


s = ARGV[0]
s = s + 'ft' unless s.index('f')

puts FeetExpander.expand(s)

